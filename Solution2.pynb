{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "f54b7980",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import warnings, scipy\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.patches as mpatches\n",
    "from matplotlib.gridspec import GridSpec\n",
    "import seaborn as sns\n",
    "from datetime import datetime as dt\n",
    "import dateutil\n",
    "from scipy.optimize import curve_fit\n",
    "from sklearn.ensemble import GradientBoostingClassifier, RandomForestClassifier\n",
    "from sklearn.model_selection import ParameterGrid, StratifiedKFold, train_test_split\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.metrics import classification_report, f1_score, confusion_matrix\n",
    "from sklearn.metrics import roc_curve, roc_auc_score, precision_recall_curve\n",
    "from sklearn.ensemble import GradientBoostingClassifier\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import classification_report, confusion_matrix\n",
    "from catboost import CatBoostRegressor, Pool\n",
    "from sklearn.model_selection import cross_val_score, KFold, GridSearchCV, ShuffleSplit\n",
    "warnings.filterwarnings(\"ignore\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "f17628a6",
   "metadata": {},
   "outputs": [],
   "source": [
    "# !pip freeze > requirements2.txt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "id": "a4ab1967",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv(\"Clean_SCL.csv\", parse_dates=['Fecha-I', 'Fecha-O'])\n",
    "df['TIPOVUELO'] = df['TIPOVUELO'].apply(lambda x: 1 if x=='I' else 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "id": "f0f6cb62",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 68206 entries, 0 to 68205\n",
      "Data columns (total 24 columns):\n",
      " #   Column          Non-Null Count  Dtype         \n",
      "---  ------          --------------  -----         \n",
      " 0   Fecha-I         68206 non-null  datetime64[ns]\n",
      " 1   Vlo-I           68206 non-null  object        \n",
      " 2   Ori-I           68206 non-null  object        \n",
      " 3   Des-I           68206 non-null  object        \n",
      " 4   Emp-I           68206 non-null  object        \n",
      " 5   Fecha-O         68206 non-null  datetime64[ns]\n",
      " 6   Vlo-O           68205 non-null  object        \n",
      " 7   Ori-O           68206 non-null  object        \n",
      " 8   Des-O           68206 non-null  object        \n",
      " 9   Emp-O           68206 non-null  object        \n",
      " 10  DIA             68206 non-null  int64         \n",
      " 11  MES             68206 non-null  int64         \n",
      " 12  DIANOM          68206 non-null  object        \n",
      " 13  TIPOVUELO       68206 non-null  int64         \n",
      " 14  OPERA           68206 non-null  object        \n",
      " 15  SIGLAORI        68206 non-null  object        \n",
      " 16  SIGLADES        68206 non-null  object        \n",
      " 17  ANO             68206 non-null  int64         \n",
      " 18  temporada_alta  68206 non-null  int64         \n",
      " 19  dif_min         68206 non-null  float64       \n",
      " 20  atraso_15       68206 non-null  int64         \n",
      " 21  periodo_dia     68206 non-null  object        \n",
      " 22  Season          68206 non-null  object        \n",
      " 23  dif_nivel       68206 non-null  int64         \n",
      "dtypes: datetime64[ns](2), float64(1), int64(7), object(14)\n",
      "memory usage: 12.5+ MB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "db287ea5",
   "metadata": {},
   "source": [
    "Lista con variables categoricas, singleencode y columnas que borrar"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "id": "4ba26fac",
   "metadata": {},
   "outputs": [],
   "source": [
    "cat = ['Season', 'periodo_dia', 'ANO', 'Emp-O','Des-O', 'DIANOM', 'DIA', 'MES'] # Des-O?\n",
    "single = ['TIPOVUELO']\n",
    "delete = ['Fecha-I','OPERA', 'SIGLAORI', 'Fecha-O', 'dif_min','dif_nivel',\n",
    "'Vlo-O', 'Ori-I','Vlo-I', 'Des-I', 'Emp-I', 'Ori-O', 'SIGLADES']\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "id": "48b13bdd",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df.drop(labels=delete, axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "68721e43",
   "metadata": {},
   "source": [
    "# Label Encoder & Dummies"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "33855fdf",
   "metadata": {},
   "source": [
    "Creamos una columna para cada variable categorica"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "id": "c773eecd",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.get_dummies(data=df, columns=cat) \n",
    "X = df.drop(labels=['atraso_15'], axis=1)\n",
    "y = df[['atraso_15']]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ebf3165b",
   "metadata": {},
   "source": [
    "# MODELO"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "64fc8e8c",
   "metadata": {},
   "source": [
    "Dividimos el dataset en train, test data y validation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "id": "463e6db1",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "X_trainval, X_test, y_trainval, y_test = train_test_split(X, y, \n",
    "                             random_state=42)\n",
    "X_train, X_valid, y_train, y_valid = train_test_split(X_trainval, \n",
    "                    y_trainval, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "id": "5fb1a065",
   "metadata": {},
   "outputs": [],
   "source": [
    "kfold = KFold(n_splits=3, shuffle=True, random_state=42)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "42ced3f2",
   "metadata": {},
   "source": [
    "# Param Grid GridSearchCV"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d3e03974",
   "metadata": {},
   "source": [
    "## Utilizando GradientBoostClassifier"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9750e2c0",
   "metadata": {},
   "source": [
    "Se utiliza un Gradient Boost Classifier y la funcion GridSearchCV, para crear diferentes modelos y eleigr los mejores hiperparametros para conseguir el mejor score posible del modelo."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "id": "5e16d48f",
   "metadata": {},
   "outputs": [],
   "source": [
    "param_grid = {'n_estimators':[ 45, 55],\n",
    "                    'learning_rate':[ 0.8, 1], \n",
    "                    'max_features':[14, 18],\n",
    "                    'max_depth':[14, 22]}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "id": "371391ae",
   "metadata": {},
   "outputs": [],
   "source": [
    "grid_search = GridSearchCV(GradientBoostingClassifier(), param_grid, cv=3, scoring='f1')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "id": "e72e8bb6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=3, estimator=GradientBoostingClassifier(),\n",
       "             param_grid={'learning_rate': [0.8, 1], 'max_depth': [14, 22],\n",
       "                         'max_features': [14, 18], 'n_estimators': [45, 55]},\n",
       "             scoring='f1')"
      ]
     },
     "execution_count": 141,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grid_search.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "id": "513c55d1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test set score: 0.29\n"
     ]
    }
   ],
   "source": [
    "print('Test set score: {:.2f}'.format(grid_search.score(X_valid, y_valid)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "id": "2d249d2b",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best parameters: {'learning_rate': 0.8, 'max_depth': 14, 'max_features': 18, 'n_estimators': 45}\n",
      "Best cross-validation score: 0.29\n"
     ]
    }
   ],
   "source": [
    "print(\"Best parameters: {}\".format(grid_search.best_params_))\n",
    "print(\"Best cross-validation score: {:.2f}\".format(grid_search.best_score_))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "id": "f483fbc8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best estimator:\n",
      "GradientBoostingClassifier(learning_rate=0.8, max_depth=14, max_features=18,\n",
      "                           n_estimators=45)\n"
     ]
    }
   ],
   "source": [
    "print(\"Best estimator:\\n{}\".format(grid_search.best_estimator_))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "id": "38c21478",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>param_learning_rate</th>\n",
       "      <th>param_max_depth</th>\n",
       "      <th>param_max_features</th>\n",
       "      <th>param_n_estimators</th>\n",
       "      <th>params</th>\n",
       "      <th>mean_test_score</th>\n",
       "      <th>rank_test_score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.8</td>\n",
       "      <td>14</td>\n",
       "      <td>18</td>\n",
       "      <td>45</td>\n",
       "      <td>{'learning_rate': 0.8, 'max_depth': 14, 'max_f...</td>\n",
       "      <td>0.288581</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.8</td>\n",
       "      <td>14</td>\n",
       "      <td>18</td>\n",
       "      <td>55</td>\n",
       "      <td>{'learning_rate': 0.8, 'max_depth': 14, 'max_f...</td>\n",
       "      <td>0.284810</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.8</td>\n",
       "      <td>14</td>\n",
       "      <td>14</td>\n",
       "      <td>45</td>\n",
       "      <td>{'learning_rate': 0.8, 'max_depth': 14, 'max_f...</td>\n",
       "      <td>0.283438</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  param_learning_rate param_max_depth param_max_features param_n_estimators  \\\n",
       "2                 0.8              14                 18                 45   \n",
       "3                 0.8              14                 18                 55   \n",
       "0                 0.8              14                 14                 45   \n",
       "\n",
       "                                              params  mean_test_score  \\\n",
       "2  {'learning_rate': 0.8, 'max_depth': 14, 'max_f...         0.288581   \n",
       "3  {'learning_rate': 0.8, 'max_depth': 14, 'max_f...         0.284810   \n",
       "0  {'learning_rate': 0.8, 'max_depth': 14, 'max_f...         0.283438   \n",
       "\n",
       "   rank_test_score  \n",
       "2                1  \n",
       "3                2  \n",
       "0                3  "
      ]
     },
     "execution_count": 145,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results = pd.DataFrame(grid_search.cv_results_)\n",
    "\n",
    "results.sort_values('mean_test_score', ascending=False)[['param_learning_rate', \n",
    "        'param_max_depth', 'param_max_features', 'param_n_estimators','params', 'mean_test_score', 'rank_test_score']].head(3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4b0b55be",
   "metadata": {},
   "source": [
    "El modelo arroja que los features mas importantes para predecir si algun vuelo se va a retrasar o no, son : Periodo del dia, Emp-O, temporada alta y DIANOM."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "id": "c4b75e93",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Variable Importance')"
      ]
     },
     "execution_count": 146,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 576x1296 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "feature_importance = grid_search.best_estimator_.feature_importances_\n",
    "# make importances relative to max importance\n",
    "feature_importance = 100.0 * (feature_importance / feature_importance.max())\n",
    "sorted_idx = np.argsort(feature_importance)\n",
    "pos = np.arange(sorted_idx.shape[0]) + .5\n",
    "# plt.subplot(1, 2, 2)\n",
    "\n",
    "\n",
    "plt.figure(figsize=(8, 18))\n",
    "plt.barh(pos[-10:], feature_importance[sorted_idx][-10:], align='center')\n",
    "\n",
    "\n",
    "plt.yticks(pos[-10:], X.keys()[sorted_idx][-10:])\n",
    "plt.xlabel('Relative Importance')\n",
    "plt.title('Variable Importance')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ba238ce0",
   "metadata": {},
   "source": [
    "Creamos un modelo con los hiperparametros enocontrados."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "id": "5dd70c1d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "GradientBoostingClassifier(learning_rate=0.8, max_depth=14, max_features=18,\n",
      "                           n_estimators=45)\n"
     ]
    }
   ],
   "source": [
    "param_grid2 = grid_search.best_estimator_\n",
    "print(param_grid2)\n",
    "param_grid2 = {'n_estimators':45,\n",
    "                    'learning_rate':0.8, \n",
    "                    'max_features':14,\n",
    "                    'max_depth':14}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "id": "686da67a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[12293,  1569],\n",
       "       [ 2299,   891]])"
      ]
     },
     "execution_count": 166,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "modelboost = GradientBoostingClassifier(n_estimators=45, learning_rate=0.8, max_features=14, max_depth=14)\n",
    "modelboost.fit(X_train, y_train)\n",
    "pred_boost = modelboost.predict(X_test)\n",
    "confusionboost = confusion_matrix(y_test, pred_boost)\n",
    "confusionboost"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "866261e4",
   "metadata": {},
   "source": [
    "El f1-score del modelo para predcir si tiene retraso o no es de 0.32"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "id": "6ede50df",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.3153982300884956\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      " sin retraso       0.84      0.89      0.86     13862\n",
      " con retraso       0.36      0.28      0.32      3190\n",
      "\n",
      "    accuracy                           0.77     17052\n",
      "   macro avg       0.60      0.58      0.59     17052\n",
      "weighted avg       0.75      0.77      0.76     17052\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(f1_score(y_test, pred_boost))\n",
    "print(classification_report(y_test, pred_boost, target_names=['sin retraso', ' con retraso']))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "51afbdde",
   "metadata": {},
   "source": [
    "Cada punto corresponde del posible \"threshold\" que puede lograr la funcion de decision, entre mas cerca a la parte superior derecha, es mejor el modelo para clasificar"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "id": "ba8bddbb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x7fc222757c10>"
      ]
     },
     "execution_count": 168,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "precision, recall, thresholds = precision_recall_curve(\n",
    "        y_test, modelboost.decision_function(X_test))\n",
    "\n",
    "close_zero = np.argmin(np.abs(thresholds))\n",
    "plt.plot(precision[close_zero], recall[close_zero], 'o', markersize=10,\n",
    "label=\"threshold zero\", fillstyle=\"none\", c='k', mew=2)\n",
    "plt.plot(precision, recall, label=\"precision recall curve\")\n",
    "plt.xlabel(\"Precision\")\n",
    "plt.ylabel(\"Recall\")\n",
    "plt.legend(loc=\"best\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "id": "91c82f15",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "f1_score of random forest: 0.009\n",
      "f1_score of GBC: 0.315\n"
     ]
    }
   ],
   "source": [
    "print(\"f1_score of random forest: {:.3f}\".format(\n",
    "f1_score(y_test, rf.predict(X_test))))\n",
    "print(\"f1_score of GBC: {:.3f}\".format(f1_score(y_test, modelboost.predict(X_test))))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "16993bbf",
   "metadata": {},
   "source": [
    "# Logistic Regressiion"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "id": "c039cb46",
   "metadata": {},
   "outputs": [],
   "source": [
    "param_grid2 = {'C':[1, 2, 3], 'penalty':['l1', 'l2']}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 195,
   "id": "adde0f9e",
   "metadata": {},
   "outputs": [],
   "source": [
    "grid_search2 = GridSearchCV(LogisticRegression(), param_grid2, cv=3, scoring='f1')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 196,
   "id": "44f35084",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=3, estimator=LogisticRegression(),\n",
       "             param_grid={'C': [1, 2, 3], 'penalty': ['l1', 'l2']},\n",
       "             scoring='f1')"
      ]
     },
     "execution_count": 196,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grid_search2.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 197,
   "id": "57b09d05",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test set score: 0.09\n"
     ]
    }
   ],
   "source": [
    "print('Test set score: {:.2f}'.format(grid_search2.score(X_valid, y_valid)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 198,
   "id": "779808c2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best parameters: {'C': 3, 'penalty': 'l2'}\n",
      "Best cross-validation score: 0.09\n"
     ]
    }
   ],
   "source": [
    "print(\"Best parameters: {}\".format(grid_search2.best_params_))\n",
    "print(\"Best cross-validation score: {:.2f}\".format(grid_search2.best_score_))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 199,
   "id": "a4544f4e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best estimator:\n",
      "LogisticRegression(C=3)\n"
     ]
    }
   ],
   "source": [
    "print(\"Best estimator:\\n{}\".format(grid_search2.best_estimator_))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 200,
   "id": "01d89adb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mean_fit_time</th>\n",
       "      <th>std_fit_time</th>\n",
       "      <th>mean_score_time</th>\n",
       "      <th>std_score_time</th>\n",
       "      <th>param_C</th>\n",
       "      <th>param_penalty</th>\n",
       "      <th>params</th>\n",
       "      <th>split0_test_score</th>\n",
       "      <th>split1_test_score</th>\n",
       "      <th>split2_test_score</th>\n",
       "      <th>mean_test_score</th>\n",
       "      <th>std_test_score</th>\n",
       "      <th>rank_test_score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.472571</td>\n",
       "      <td>0.053737</td>\n",
       "      <td>0.024273</td>\n",
       "      <td>0.000651</td>\n",
       "      <td>3</td>\n",
       "      <td>l2</td>\n",
       "      <td>{'C': 3, 'penalty': 'l2'}</td>\n",
       "      <td>0.084660</td>\n",
       "      <td>0.082171</td>\n",
       "      <td>0.090701</td>\n",
       "      <td>0.085844</td>\n",
       "      <td>0.003582</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.439801</td>\n",
       "      <td>0.013823</td>\n",
       "      <td>0.023390</td>\n",
       "      <td>0.000960</td>\n",
       "      <td>2</td>\n",
       "      <td>l2</td>\n",
       "      <td>{'C': 2, 'penalty': 'l2'}</td>\n",
       "      <td>0.083883</td>\n",
       "      <td>0.082298</td>\n",
       "      <td>0.087786</td>\n",
       "      <td>0.084656</td>\n",
       "      <td>0.002306</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.443671</td>\n",
       "      <td>0.004411</td>\n",
       "      <td>0.024713</td>\n",
       "      <td>0.000469</td>\n",
       "      <td>1</td>\n",
       "      <td>l2</td>\n",
       "      <td>{'C': 1, 'penalty': 'l2'}</td>\n",
       "      <td>0.080997</td>\n",
       "      <td>0.078034</td>\n",
       "      <td>0.085791</td>\n",
       "      <td>0.081607</td>\n",
       "      <td>0.003196</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.032221</td>\n",
       "      <td>0.004621</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>l1</td>\n",
       "      <td>{'C': 1, 'penalty': 'l1'}</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.028926</td>\n",
       "      <td>0.003635</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2</td>\n",
       "      <td>l1</td>\n",
       "      <td>{'C': 2, 'penalty': 'l1'}</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.032847</td>\n",
       "      <td>0.003781</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3</td>\n",
       "      <td>l1</td>\n",
       "      <td>{'C': 3, 'penalty': 'l1'}</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   mean_fit_time  std_fit_time  mean_score_time  std_score_time param_C  \\\n",
       "5       0.472571      0.053737         0.024273        0.000651       3   \n",
       "3       0.439801      0.013823         0.023390        0.000960       2   \n",
       "1       0.443671      0.004411         0.024713        0.000469       1   \n",
       "0       0.032221      0.004621         0.000000        0.000000       1   \n",
       "2       0.028926      0.003635         0.000000        0.000000       2   \n",
       "4       0.032847      0.003781         0.000000        0.000000       3   \n",
       "\n",
       "  param_penalty                     params  split0_test_score  \\\n",
       "5            l2  {'C': 3, 'penalty': 'l2'}           0.084660   \n",
       "3            l2  {'C': 2, 'penalty': 'l2'}           0.083883   \n",
       "1            l2  {'C': 1, 'penalty': 'l2'}           0.080997   \n",
       "0            l1  {'C': 1, 'penalty': 'l1'}                NaN   \n",
       "2            l1  {'C': 2, 'penalty': 'l1'}                NaN   \n",
       "4            l1  {'C': 3, 'penalty': 'l1'}                NaN   \n",
       "\n",
       "   split1_test_score  split2_test_score  mean_test_score  std_test_score  \\\n",
       "5           0.082171           0.090701         0.085844        0.003582   \n",
       "3           0.082298           0.087786         0.084656        0.002306   \n",
       "1           0.078034           0.085791         0.081607        0.003196   \n",
       "0                NaN                NaN              NaN             NaN   \n",
       "2                NaN                NaN              NaN             NaN   \n",
       "4                NaN                NaN              NaN             NaN   \n",
       "\n",
       "   rank_test_score  \n",
       "5                1  \n",
       "3                2  \n",
       "1                3  \n",
       "0                4  \n",
       "2                5  \n",
       "4                6  "
      ]
     },
     "execution_count": 200,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results = pd.DataFrame(grid_search2.cv_results_)\n",
    "\n",
    "results.sort_values('mean_test_score', ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 201,
   "id": "64594215",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[13743,   119],\n",
       "       [ 3032,   158]])"
      ]
     },
     "execution_count": 201,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "modellog = LogisticRegression(C=1)\n",
    "modellog.fit(X_train, y_train)\n",
    "pred_log = modellog.predict(X_test)\n",
    "confusionlog = confusion_matrix(y_test, pred_log)\n",
    "confusionlog"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a7055a27",
   "metadata": {},
   "source": [
    "En el siguiente reporte de clasificacion podemos ver que a pesar de tener un accuracy de 0.82, el f1 score de la variable con retraso es solamente de 0.09, y con el modelo anterior fue de .31"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 202,
   "id": "7a3fcf62",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.09114508220363428\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      " sin retraso       0.82      0.99      0.90     13862\n",
      " con retraso       0.57      0.05      0.09      3190\n",
      "\n",
      "    accuracy                           0.82     17052\n",
      "   macro avg       0.69      0.52      0.49     17052\n",
      "weighted avg       0.77      0.82      0.75     17052\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(f1_score(y_test, pred_log))\n",
    "print(classification_report(y_test, pred_log, target_names=['sin retraso', ' con retraso']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 203,
   "id": "6383e6d1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x7fc22579c6d0>"
      ]
     },
     "execution_count": 203,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "precisionlog, recallog, thresholdslog = precision_recall_curve(\n",
    "        y_test, modellog.decision_function(X_test))\n",
    "\n",
    "close_zero = np.argmin(np.abs(thresholds))\n",
    "plt.plot(precisionlog[close_zero], recallog[close_zero], 'o', markersize=10,\n",
    "label=\"threshold zero\", fillstyle=\"none\", c='k', mew=2)\n",
    "plt.plot(precisionlog, recallog, label=\"precision recall curve\")\n",
    "plt.xlabel(\"Precision\")\n",
    "plt.ylabel(\"Recall\")\n",
    "plt.legend(loc=\"best\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 204,
   "id": "14fe7e64",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x7fc225a4c990>"
      ]
     },
     "execution_count": 204,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "precisionlog, recallog, thresholdslog = precision_recall_curve(\n",
    "        y_test, modellog.decision_function(X_test))\n",
    "\n",
    "close_zero = np.argmin(np.abs(thresholds))\n",
    "plt.plot(precisionlog[close_zero], recallog[close_zero], 'o', markersize=10,\n",
    "label=\"threshold zero\", fillstyle=\"none\", c='k', mew=2)\n",
    "plt.plot(precisionlog, recallog, label=\"precision recall curve\")\n",
    "plt.xlabel(\"Precision\")\n",
    "plt.ylabel(\"Recall\")\n",
    "plt.legend(loc=\"best\")\n",
    "\n",
    "precision, recall, thresholds = precision_recall_curve(\n",
    "        y_test, modelboost.decision_function(X_test))\n",
    "\n",
    "close_zero = np.argmin(np.abs(thresholds))\n",
    "plt.plot(precision[close_zero], recall[close_zero], 'o', markersize=10,\n",
    "label=\"threshold zero\", fillstyle=\"none\", c='k', mew=2)\n",
    "plt.plot(precision, recall, label=\"precision recall curve\")\n",
    "plt.xlabel(\"Precision\")\n",
    "plt.ylabel(\"Recall\")\n",
    "plt.legend(loc=\"best\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 205,
   "id": "7f924ffe",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "f1_score of random forest: 0.315\n",
      "f1_score of svc: 0.091\n"
     ]
    }
   ],
   "source": [
    "print(\"f1_score of random forest: {:.3f}\".format(\n",
    "f1_score(y_test, modelboost.predict(X_test))))\n",
    "print(\"f1_score of svc: {:.3f}\".format(f1_score(y_test, modellog.predict(X_test))))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 206,
   "id": "b1b2262f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Average precision of modelboost: 0.294\n",
      "Average precision of modellog: 0.349\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import average_precision_score\n",
    "ap_rf = average_precision_score(y_test, modelboost.predict_proba(X_test)[:, 1])\n",
    "ap_svc = average_precision_score(y_test, modellog.decision_function(X_test))\n",
    "print(\"Average precision of modelboost: {:.3f}\".format(ap_rf))\n",
    "print(\"Average precision of modellog: {:.3f}\".format(ap_svc))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 207,
   "id": "140823df",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x7fc226765810>"
      ]
     },
     "execution_count": 207,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.metrics import roc_curve\n",
    "fpr, tpr, thresholds = roc_curve(y_test, modelboost.decision_function(X_test))\n",
    "plt.plot(fpr, tpr, label=\"GBC Curve\")\n",
    "plt.xlabel(\"FPR\")\n",
    "plt.ylabel(\"TPR (recall)\")\n",
    "# find threshold closest to zero\n",
    "close_zero = np.argmin(np.abs(thresholds))\n",
    "plt.plot(fpr[close_zero], tpr[close_zero], 'o', markersize=10,\n",
    "label=\"threshold zero\", fillstyle=\"none\", c='k', mew=2)\n",
    "plt.legend(loc=4)\n",
    "\n",
    "from sklearn.metrics import roc_curve\n",
    "fpr, tpr, thresholds = roc_curve(y_test, modellog.decision_function(X_test))\n",
    "plt.plot(fpr, tpr, label=\"Log Curve\")\n",
    "plt.xlabel(\"FPR\")\n",
    "plt.ylabel(\"TPR (recall)\")\n",
    "# find threshold closest to zero\n",
    "close_zero = np.argmin(np.abs(thresholds))\n",
    "plt.plot(fpr[close_zero], tpr[close_zero], 'o', markersize=10,\n",
    "label=\"threshold zero\", fillstyle=\"none\", c='k', mew=2)\n",
    "plt.legend(loc=4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 208,
   "id": "1fe79908",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "AUC for Random Forest: 0.671\n",
      "AUC for SVC: 0.693\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import roc_auc_score\n",
    "rf_auc = roc_auc_score(y_test, modelboost.predict_proba(X_test)[:, 1])\n",
    "svc_auc = roc_auc_score(y_test, modellog.decision_function(X_test))\n",
    "print(\"AUC for Random Forest: {:.3f}\".format(rf_auc))\n",
    "print(\"AUC for SVC: {:.3f}\".format(svc_auc))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3346bf0b",
   "metadata": {},
   "source": [
    "# svcclass\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 209,
   "id": "ee044998",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.svm import LinearSVC"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 210,
   "id": "c4ff7438",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "svc = LinearSVC(C=2).fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 211,
   "id": "3f4238df",
   "metadata": {},
   "outputs": [],
   "source": [
    "pred_svc = svc.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 212,
   "id": "f298bfbb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[13767,    95],\n",
       "       [ 3062,   128]])"
      ]
     },
     "execution_count": 212,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "confusionsvc = confusion_matrix(y_test, pred_svc)\n",
    "confusionsvc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 213,
   "id": "cabf8e7d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0750073249340756"
      ]
     },
     "execution_count": 213,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "f1_score(y_test, pred_svc)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f5b41c3d",
   "metadata": {},
   "source": [
    "4. Entrena uno o varios modelos (usando el/los algoritmo(s) que prefieras) para estimar la probabilidad de atraso de un vuelo.\n",
    "Sientete libre de generar variables adicionales y/o complementar con variables externas.\n",
    "    * De los 4 modelos generados (Random Forest, LinearSVC, LogisticRegression y GradientBoostClassifier(GBC), el modelo gbc obtuvo un mejor score en f1, con un valor de .31, aa diferencia de los demas modelos con un f1 de asd, .07 y .09 respectivamente\n",
    "\n",
    "\n",
    "\n",
    "5. Eval a tu modelo.  Qu  performance tiene?  Qu  m tricas usaste para evaluar esa performance y por qu ?  Por qe elegiste ese algoritmo en particular?  Quevariables son las que m s influyen en la prediccion?  Como podrias mejorar la performance?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3fca9b12",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5bba9570",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0cc4bf82",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
